//
// TrumpThrowView.swift
// Generated by Core Animator version 1.3 on 2/27/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class TrumpThrowView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 1136, height: 732))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:1136, height:732)
		__scaling__.center = CGPoint(x:568.0, y:366.1)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let dtTorso = UIImageView()
		dtTorso.bounds = CGRect(x:0, y:0, width:360.0, height:360.0)
		var imgMiddle: UIImage!
		if let imagePath = bundle.pathForResource("middle.png", ofType:nil) {
			imgMiddle = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'middle.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		dtTorso.image = imgMiddle
		dtTorso.contentMode = .Center
		dtTorso.layer.position = CGPoint(x:542.380, y:431.478)
		dtTorso.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(6.26), 0.60, 0.60)
		__scaling__.addSubview(dtTorso)
		viewsByName["dt_torso"] = dtTorso

		let dtLegs = UIImageView()
		dtLegs.bounds = CGRect(x:0, y:0, width:360.0, height:360.0)
		var imgDtLegs: UIImage!
		if let imagePath = bundle.pathForResource("dt_legs.png", ofType:nil) {
			imgDtLegs = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'dt_legs.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		dtLegs.image = imgDtLegs
		dtLegs.contentMode = .Center
		dtLegs.layer.position = CGPoint(x:560.086, y:616.586)
		dtLegs.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(6.26), 0.60, 0.60)
		__scaling__.addSubview(dtLegs)
		viewsByName["dt_legs"] = dtLegs

		let dtHead = UIImageView()
		dtHead.bounds = CGRect(x:0, y:0, width:360.0, height:360.0)
		var imgDtHead: UIImage!
		if let imagePath = bundle.pathForResource("dt_head.png", ofType:nil) {
			imgDtHead = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'dt_head.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		dtHead.image = imgDtHead
		dtHead.contentMode = .Center
		dtHead.layer.position = CGPoint(x:560.086, y:265.068)
		dtHead.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(6.26), 0.60, 0.60)
		__scaling__.addSubview(dtHead)
		viewsByName["dt_head"] = dtHead

		let dtArmR = UIImageView()
		dtArmR.bounds = CGRect(x:0, y:0, width:360.0, height:360.0)
		dtArmR.layer.anchorPoint = CGPoint(x:0.098, y:0.622)
		var imgDtArmR: UIImage!
		if let imagePath = bundle.pathForResource("dt_arm_r.png", ofType:nil) {
			imgDtArmR = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'dt_arm_r.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		dtArmR.image = imgDtArmR
		dtArmR.contentMode = .Center
		dtArmR.layer.position = CGPoint(x:614.131, y:347.244)
		dtArmR.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(0.10), 0.60, 0.60)
		__scaling__.addSubview(dtArmR)
		viewsByName["dt_arm_r"] = dtArmR

		let dtArmL = UIImageView()
		dtArmL.bounds = CGRect(x:0, y:0, width:360.0, height:360.0)
		dtArmL.layer.anchorPoint = CGPoint(x:0.919, y:0.586)
		var imgDtArmL: UIImage!
		if let imagePath = bundle.pathForResource("dt_arm_l.png", ofType:nil) {
			imgDtArmL = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'dt_arm_l.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		dtArmL.image = imgDtArmL
		dtArmL.contentMode = .Center
		dtArmL.layer.position = CGPoint(x:505.430, y:340.964)
		dtArmL.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(6.05), 0.60, 0.60)
		__scaling__.addSubview(dtArmL)
		viewsByName["dt_arm_l"] = dtArmL

		self.viewsByName = viewsByName
	}

	// - MARK: fade

	func addFadeAnimation() {
		addFadeAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addFadeAnimation(completion: ((Bool) -> Void)?) {
		addFadeAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addFadeAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addFadeAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addFadeAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addFadeAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addFadeAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Fade")
			self.animationCompletions[layer.animationForKey("Fade")!] = complete
		}

		let dtLegsRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		dtLegsRotationAnimation.duration = 1.000
		dtLegsRotationAnimation.values = [6.263 as Float, 6.264 as Float]
		dtLegsRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtLegsRotationAnimation.timingFunctions = [easeOutTiming]
		dtLegsRotationAnimation.beginTime = beginTime
		dtLegsRotationAnimation.fillMode = fillMode
		dtLegsRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_legs"]?.layer.addAnimation(dtLegsRotationAnimation, forKey:"fade_Rotation")

		let dtLegsOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		dtLegsOpacityAnimation.duration = 1.000
		dtLegsOpacityAnimation.values = [0.129 as Float, 0.961 as Float]
		dtLegsOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtLegsOpacityAnimation.timingFunctions = [easeOutTiming]
		dtLegsOpacityAnimation.beginTime = beginTime
		dtLegsOpacityAnimation.fillMode = fillMode
		dtLegsOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_legs"]?.layer.addAnimation(dtLegsOpacityAnimation, forKey:"fade_Opacity")

		let dtLegsScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		dtLegsScaleXAnimation.duration = 1.000
		dtLegsScaleXAnimation.values = [0.300 as Float, 0.600 as Float]
		dtLegsScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtLegsScaleXAnimation.timingFunctions = [easeOutTiming]
		dtLegsScaleXAnimation.beginTime = beginTime
		dtLegsScaleXAnimation.fillMode = fillMode
		dtLegsScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_legs"]?.layer.addAnimation(dtLegsScaleXAnimation, forKey:"fade_ScaleX")

		let dtLegsScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		dtLegsScaleYAnimation.duration = 1.000
		dtLegsScaleYAnimation.values = [0.300 as Float, 0.600 as Float]
		dtLegsScaleYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtLegsScaleYAnimation.timingFunctions = [easeOutTiming]
		dtLegsScaleYAnimation.beginTime = beginTime
		dtLegsScaleYAnimation.fillMode = fillMode
		dtLegsScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_legs"]?.layer.addAnimation(dtLegsScaleYAnimation, forKey:"fade_ScaleY")

		let dtLegsTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		dtLegsTranslationXAnimation.duration = 1.000
		dtLegsTranslationXAnimation.values = [0.000 as Float, 13.823 as Float]
		dtLegsTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtLegsTranslationXAnimation.timingFunctions = [easeOutTiming]
		dtLegsTranslationXAnimation.beginTime = beginTime
		dtLegsTranslationXAnimation.fillMode = fillMode
		dtLegsTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_legs"]?.layer.addAnimation(dtLegsTranslationXAnimation, forKey:"fade_TranslationX")

		let dtLegsTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		dtLegsTranslationYAnimation.duration = 1.000
		dtLegsTranslationYAnimation.values = [0.000 as Float, -3.570 as Float]
		dtLegsTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtLegsTranslationYAnimation.timingFunctions = [easeOutTiming]
		dtLegsTranslationYAnimation.beginTime = beginTime
		dtLegsTranslationYAnimation.fillMode = fillMode
		dtLegsTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_legs"]?.layer.addAnimation(dtLegsTranslationYAnimation, forKey:"fade_TranslationY")

		let dtTorsoRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		dtTorsoRotationAnimation.duration = 1.000
		dtTorsoRotationAnimation.values = [6.263 as Float, 6.264 as Float]
		dtTorsoRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtTorsoRotationAnimation.timingFunctions = [easeOutTiming]
		dtTorsoRotationAnimation.beginTime = beginTime
		dtTorsoRotationAnimation.fillMode = fillMode
		dtTorsoRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_torso"]?.layer.addAnimation(dtTorsoRotationAnimation, forKey:"fade_Rotation")

		let dtTorsoOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		dtTorsoOpacityAnimation.duration = 1.000
		dtTorsoOpacityAnimation.values = [0.129 as Float, 0.961 as Float]
		dtTorsoOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtTorsoOpacityAnimation.timingFunctions = [easeOutTiming]
		dtTorsoOpacityAnimation.beginTime = beginTime
		dtTorsoOpacityAnimation.fillMode = fillMode
		dtTorsoOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_torso"]?.layer.addAnimation(dtTorsoOpacityAnimation, forKey:"fade_Opacity")

		let dtTorsoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		dtTorsoScaleXAnimation.duration = 1.000
		dtTorsoScaleXAnimation.values = [0.300 as Float, 0.600 as Float]
		dtTorsoScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtTorsoScaleXAnimation.timingFunctions = [easeOutTiming]
		dtTorsoScaleXAnimation.beginTime = beginTime
		dtTorsoScaleXAnimation.fillMode = fillMode
		dtTorsoScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_torso"]?.layer.addAnimation(dtTorsoScaleXAnimation, forKey:"fade_ScaleX")

		let dtTorsoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		dtTorsoScaleYAnimation.duration = 1.000
		dtTorsoScaleYAnimation.values = [0.300 as Float, 0.600 as Float]
		dtTorsoScaleYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtTorsoScaleYAnimation.timingFunctions = [easeOutTiming]
		dtTorsoScaleYAnimation.beginTime = beginTime
		dtTorsoScaleYAnimation.fillMode = fillMode
		dtTorsoScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_torso"]?.layer.addAnimation(dtTorsoScaleYAnimation, forKey:"fade_ScaleY")

		let dtTorsoTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		dtTorsoTranslationXAnimation.duration = 1.000
		dtTorsoTranslationXAnimation.values = [10.867 as Float, 13.883 as Float]
		dtTorsoTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtTorsoTranslationXAnimation.timingFunctions = [easeOutTiming]
		dtTorsoTranslationXAnimation.beginTime = beginTime
		dtTorsoTranslationXAnimation.fillMode = fillMode
		dtTorsoTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_torso"]?.layer.addAnimation(dtTorsoTranslationXAnimation, forKey:"fade_TranslationX")

		let dtTorsoTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		dtTorsoTranslationYAnimation.duration = 1.000
		dtTorsoTranslationYAnimation.values = [99.898 as Float, -10.339 as Float]
		dtTorsoTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtTorsoTranslationYAnimation.timingFunctions = [easeOutTiming]
		dtTorsoTranslationYAnimation.beginTime = beginTime
		dtTorsoTranslationYAnimation.fillMode = fillMode
		dtTorsoTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_torso"]?.layer.addAnimation(dtTorsoTranslationYAnimation, forKey:"fade_TranslationY")

		let dtArmRRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		dtArmRRotationAnimation.duration = 1.000
		dtArmRRotationAnimation.values = [0.420 as Float, 0.355 as Float]
		dtArmRRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmRRotationAnimation.timingFunctions = [easeOutTiming]
		dtArmRRotationAnimation.beginTime = beginTime
		dtArmRRotationAnimation.fillMode = fillMode
		dtArmRRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_r"]?.layer.addAnimation(dtArmRRotationAnimation, forKey:"fade_Rotation")

		let dtArmROpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		dtArmROpacityAnimation.duration = 1.000
		dtArmROpacityAnimation.values = [0.129 as Float, 0.961 as Float]
		dtArmROpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmROpacityAnimation.timingFunctions = [easeOutTiming]
		dtArmROpacityAnimation.beginTime = beginTime
		dtArmROpacityAnimation.fillMode = fillMode
		dtArmROpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_r"]?.layer.addAnimation(dtArmROpacityAnimation, forKey:"fade_Opacity")

		let dtArmRScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		dtArmRScaleXAnimation.duration = 1.000
		dtArmRScaleXAnimation.values = [0.300 as Float, 0.600 as Float]
		dtArmRScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmRScaleXAnimation.timingFunctions = [easeOutTiming]
		dtArmRScaleXAnimation.beginTime = beginTime
		dtArmRScaleXAnimation.fillMode = fillMode
		dtArmRScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_r"]?.layer.addAnimation(dtArmRScaleXAnimation, forKey:"fade_ScaleX")

		let dtArmRScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		dtArmRScaleYAnimation.duration = 1.000
		dtArmRScaleYAnimation.values = [0.300 as Float, 0.600 as Float]
		dtArmRScaleYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmRScaleYAnimation.timingFunctions = [easeOutTiming]
		dtArmRScaleYAnimation.beginTime = beginTime
		dtArmRScaleYAnimation.fillMode = fillMode
		dtArmRScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_r"]?.layer.addAnimation(dtArmRScaleYAnimation, forKey:"fade_ScaleY")

		let dtArmRTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		dtArmRTranslationXAnimation.duration = 1.000
		dtArmRTranslationXAnimation.values = [-18.258 as Float, 21.872 as Float]
		dtArmRTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmRTranslationXAnimation.timingFunctions = [easeOutTiming]
		dtArmRTranslationXAnimation.beginTime = beginTime
		dtArmRTranslationXAnimation.fillMode = fillMode
		dtArmRTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_r"]?.layer.addAnimation(dtArmRTranslationXAnimation, forKey:"fade_TranslationX")

		let dtArmRTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		dtArmRTranslationYAnimation.duration = 1.000
		dtArmRTranslationYAnimation.values = [142.406 as Float, -15.966 as Float]
		dtArmRTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmRTranslationYAnimation.timingFunctions = [easeOutTiming]
		dtArmRTranslationYAnimation.beginTime = beginTime
		dtArmRTranslationYAnimation.fillMode = fillMode
		dtArmRTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_r"]?.layer.addAnimation(dtArmRTranslationYAnimation, forKey:"fade_TranslationY")

		let dtArmLRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		dtArmLRotationAnimation.duration = 1.000
		dtArmLRotationAnimation.values = [5.737 as Float, 5.704 as Float]
		dtArmLRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmLRotationAnimation.timingFunctions = [easeOutTiming]
		dtArmLRotationAnimation.beginTime = beginTime
		dtArmLRotationAnimation.fillMode = fillMode
		dtArmLRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_l"]?.layer.addAnimation(dtArmLRotationAnimation, forKey:"fade_Rotation")

		let dtArmLOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		dtArmLOpacityAnimation.duration = 1.000
		dtArmLOpacityAnimation.values = [0.129 as Float, 0.961 as Float]
		dtArmLOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmLOpacityAnimation.timingFunctions = [easeOutTiming]
		dtArmLOpacityAnimation.beginTime = beginTime
		dtArmLOpacityAnimation.fillMode = fillMode
		dtArmLOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_l"]?.layer.addAnimation(dtArmLOpacityAnimation, forKey:"fade_Opacity")

		let dtArmLScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		dtArmLScaleXAnimation.duration = 1.000
		dtArmLScaleXAnimation.values = [0.300 as Float, 0.600 as Float]
		dtArmLScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmLScaleXAnimation.timingFunctions = [easeOutTiming]
		dtArmLScaleXAnimation.beginTime = beginTime
		dtArmLScaleXAnimation.fillMode = fillMode
		dtArmLScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_l"]?.layer.addAnimation(dtArmLScaleXAnimation, forKey:"fade_ScaleX")

		let dtArmLScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		dtArmLScaleYAnimation.duration = 1.000
		dtArmLScaleYAnimation.values = [0.300 as Float, 0.600 as Float]
		dtArmLScaleYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmLScaleYAnimation.timingFunctions = [easeOutTiming]
		dtArmLScaleYAnimation.beginTime = beginTime
		dtArmLScaleYAnimation.fillMode = fillMode
		dtArmLScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_l"]?.layer.addAnimation(dtArmLScaleYAnimation, forKey:"fade_ScaleY")

		let dtArmLTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		dtArmLTranslationXAnimation.duration = 1.000
		dtArmLTranslationXAnimation.values = [19.988 as Float, -0.066 as Float]
		dtArmLTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmLTranslationXAnimation.timingFunctions = [easeOutTiming]
		dtArmLTranslationXAnimation.beginTime = beginTime
		dtArmLTranslationXAnimation.fillMode = fillMode
		dtArmLTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_l"]?.layer.addAnimation(dtArmLTranslationXAnimation, forKey:"fade_TranslationX")

		let dtArmLTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		dtArmLTranslationYAnimation.duration = 1.000
		dtArmLTranslationYAnimation.values = [142.629 as Float, -11.014 as Float]
		dtArmLTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtArmLTranslationYAnimation.timingFunctions = [easeOutTiming]
		dtArmLTranslationYAnimation.beginTime = beginTime
		dtArmLTranslationYAnimation.fillMode = fillMode
		dtArmLTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_l"]?.layer.addAnimation(dtArmLTranslationYAnimation, forKey:"fade_TranslationY")

		let dtHeadRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		dtHeadRotationAnimation.duration = 1.000
		dtHeadRotationAnimation.values = [6.263 as Float, 6.264 as Float]
		dtHeadRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtHeadRotationAnimation.timingFunctions = [easeOutTiming]
		dtHeadRotationAnimation.beginTime = beginTime
		dtHeadRotationAnimation.fillMode = fillMode
		dtHeadRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_head"]?.layer.addAnimation(dtHeadRotationAnimation, forKey:"fade_Rotation")

		let dtHeadOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		dtHeadOpacityAnimation.duration = 1.000
		dtHeadOpacityAnimation.values = [0.129 as Float, 0.961 as Float]
		dtHeadOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtHeadOpacityAnimation.timingFunctions = [easeOutTiming]
		dtHeadOpacityAnimation.beginTime = beginTime
		dtHeadOpacityAnimation.fillMode = fillMode
		dtHeadOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_head"]?.layer.addAnimation(dtHeadOpacityAnimation, forKey:"fade_Opacity")

		let dtHeadScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		dtHeadScaleXAnimation.duration = 1.000
		dtHeadScaleXAnimation.values = [0.300 as Float, 0.600 as Float]
		dtHeadScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtHeadScaleXAnimation.timingFunctions = [easeOutTiming]
		dtHeadScaleXAnimation.beginTime = beginTime
		dtHeadScaleXAnimation.fillMode = fillMode
		dtHeadScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_head"]?.layer.addAnimation(dtHeadScaleXAnimation, forKey:"fade_ScaleX")

		let dtHeadScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		dtHeadScaleYAnimation.duration = 1.000
		dtHeadScaleYAnimation.values = [0.300 as Float, 0.600 as Float]
		dtHeadScaleYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtHeadScaleYAnimation.timingFunctions = [easeOutTiming]
		dtHeadScaleYAnimation.beginTime = beginTime
		dtHeadScaleYAnimation.fillMode = fillMode
		dtHeadScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_head"]?.layer.addAnimation(dtHeadScaleYAnimation, forKey:"fade_ScaleY")

		let dtHeadTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		dtHeadTranslationXAnimation.duration = 1.000
		dtHeadTranslationXAnimation.values = [5.215 as Float, 16.111 as Float]
		dtHeadTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtHeadTranslationXAnimation.timingFunctions = [easeOutTiming]
		dtHeadTranslationXAnimation.beginTime = beginTime
		dtHeadTranslationXAnimation.fillMode = fillMode
		dtHeadTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_head"]?.layer.addAnimation(dtHeadTranslationXAnimation, forKey:"fade_TranslationX")

		let dtHeadTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		dtHeadTranslationYAnimation.duration = 1.000
		dtHeadTranslationYAnimation.values = [181.445 as Float, -15.260 as Float]
		dtHeadTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		dtHeadTranslationYAnimation.timingFunctions = [easeOutTiming]
		dtHeadTranslationYAnimation.beginTime = beginTime
		dtHeadTranslationYAnimation.fillMode = fillMode
		dtHeadTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_head"]?.layer.addAnimation(dtHeadTranslationYAnimation, forKey:"fade_TranslationY")
	}

	func removeFadeAnimation() {
		self.layer.removeAnimationForKey("Fade")
		self.viewsByName["dt_legs"]?.layer.removeAnimationForKey("fade_Rotation")
		self.viewsByName["dt_legs"]?.layer.removeAnimationForKey("fade_Opacity")
		self.viewsByName["dt_legs"]?.layer.removeAnimationForKey("fade_ScaleX")
		self.viewsByName["dt_legs"]?.layer.removeAnimationForKey("fade_ScaleY")
		self.viewsByName["dt_legs"]?.layer.removeAnimationForKey("fade_TranslationX")
		self.viewsByName["dt_legs"]?.layer.removeAnimationForKey("fade_TranslationY")
		self.viewsByName["dt_torso"]?.layer.removeAnimationForKey("fade_Rotation")
		self.viewsByName["dt_torso"]?.layer.removeAnimationForKey("fade_Opacity")
		self.viewsByName["dt_torso"]?.layer.removeAnimationForKey("fade_ScaleX")
		self.viewsByName["dt_torso"]?.layer.removeAnimationForKey("fade_ScaleY")
		self.viewsByName["dt_torso"]?.layer.removeAnimationForKey("fade_TranslationX")
		self.viewsByName["dt_torso"]?.layer.removeAnimationForKey("fade_TranslationY")
		self.viewsByName["dt_arm_r"]?.layer.removeAnimationForKey("fade_Rotation")
		self.viewsByName["dt_arm_r"]?.layer.removeAnimationForKey("fade_Opacity")
		self.viewsByName["dt_arm_r"]?.layer.removeAnimationForKey("fade_ScaleX")
		self.viewsByName["dt_arm_r"]?.layer.removeAnimationForKey("fade_ScaleY")
		self.viewsByName["dt_arm_r"]?.layer.removeAnimationForKey("fade_TranslationX")
		self.viewsByName["dt_arm_r"]?.layer.removeAnimationForKey("fade_TranslationY")
		self.viewsByName["dt_arm_l"]?.layer.removeAnimationForKey("fade_Rotation")
		self.viewsByName["dt_arm_l"]?.layer.removeAnimationForKey("fade_Opacity")
		self.viewsByName["dt_arm_l"]?.layer.removeAnimationForKey("fade_ScaleX")
		self.viewsByName["dt_arm_l"]?.layer.removeAnimationForKey("fade_ScaleY")
		self.viewsByName["dt_arm_l"]?.layer.removeAnimationForKey("fade_TranslationX")
		self.viewsByName["dt_arm_l"]?.layer.removeAnimationForKey("fade_TranslationY")
		self.viewsByName["dt_head"]?.layer.removeAnimationForKey("fade_Rotation")
		self.viewsByName["dt_head"]?.layer.removeAnimationForKey("fade_Opacity")
		self.viewsByName["dt_head"]?.layer.removeAnimationForKey("fade_ScaleX")
		self.viewsByName["dt_head"]?.layer.removeAnimationForKey("fade_ScaleY")
		self.viewsByName["dt_head"]?.layer.removeAnimationForKey("fade_TranslationX")
		self.viewsByName["dt_head"]?.layer.removeAnimationForKey("fade_TranslationY")
	}

	// - MARK: jump

	func addJumpAnimation() {
		addJumpAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addJumpAnimation(completion: ((Bool) -> Void)?) {
		addJumpAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addJumpAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addJumpAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addJumpAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addJumpAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addJumpAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.800
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Jump")
			self.animationCompletions[layer.animationForKey("Jump")!] = complete
		}

		let dtLegsScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		dtLegsScaleYAnimation.duration = 0.800
		dtLegsScaleYAnimation.values = [0.600 as Float, 0.643 as Float, 0.532 as Float, 0.652 as Float, 0.541 as Float, 0.601 as Float]
		dtLegsScaleYAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtLegsScaleYAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtLegsScaleYAnimation.beginTime = beginTime
		dtLegsScaleYAnimation.fillMode = fillMode
		dtLegsScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_legs"]?.layer.addAnimation(dtLegsScaleYAnimation, forKey:"jump_ScaleY")

		let dtLegsTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		dtLegsTranslationXAnimation.duration = 0.800
		dtLegsTranslationXAnimation.values = [0.000 as Float, -0.157 as Float, 0.247 as Float, 16.505 as Float, 14.040 as Float, 13.824 as Float]
		dtLegsTranslationXAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtLegsTranslationXAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtLegsTranslationXAnimation.beginTime = beginTime
		dtLegsTranslationXAnimation.fillMode = fillMode
		dtLegsTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_legs"]?.layer.addAnimation(dtLegsTranslationXAnimation, forKey:"jump_TranslationX")

		let dtLegsTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		dtLegsTranslationYAnimation.duration = 0.800
		dtLegsTranslationYAnimation.values = [0.000 as Float, -7.789 as Float, 12.296 as Float, -133.510 as Float, 4.847 as Float, -5.869 as Float]
		dtLegsTranslationYAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtLegsTranslationYAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtLegsTranslationYAnimation.beginTime = beginTime
		dtLegsTranslationYAnimation.fillMode = fillMode
		dtLegsTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_legs"]?.layer.addAnimation(dtLegsTranslationYAnimation, forKey:"jump_TranslationY")

		let dtTorsoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		dtTorsoScaleYAnimation.duration = 0.800
		dtTorsoScaleYAnimation.values = [0.600 as Float, 0.603 as Float, 0.551 as Float, 0.613 as Float, 0.539 as Float, 0.574 as Float]
		dtTorsoScaleYAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtTorsoScaleYAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtTorsoScaleYAnimation.beginTime = beginTime
		dtTorsoScaleYAnimation.fillMode = fillMode
		dtTorsoScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_torso"]?.layer.addAnimation(dtTorsoScaleYAnimation, forKey:"jump_ScaleY")

		let dtTorsoTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		dtTorsoTranslationXAnimation.duration = 0.800
		dtTorsoTranslationXAnimation.values = [0.000 as Float, -0.404 as Float, 0.452 as Float, 20.840 as Float, 13.632 as Float, 12.026 as Float]
		dtTorsoTranslationXAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtTorsoTranslationXAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtTorsoTranslationXAnimation.beginTime = beginTime
		dtTorsoTranslationXAnimation.fillMode = fillMode
		dtTorsoTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_torso"]?.layer.addAnimation(dtTorsoTranslationXAnimation, forKey:"jump_TranslationX")

		let dtTorsoTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		dtTorsoTranslationYAnimation.duration = 0.800
		dtTorsoTranslationYAnimation.values = [0.000 as Float, -20.103 as Float, 22.509 as Float, -151.062 as Float, 19.960 as Float, -17.434 as Float]
		dtTorsoTranslationYAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtTorsoTranslationYAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtTorsoTranslationYAnimation.beginTime = beginTime
		dtTorsoTranslationYAnimation.fillMode = fillMode
		dtTorsoTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_torso"]?.layer.addAnimation(dtTorsoTranslationYAnimation, forKey:"jump_TranslationY")

		let dtArmRRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		dtArmRRotationAnimation.duration = 0.800
		dtArmRRotationAnimation.values = [0.099 as Float, 0.040 as Float, 0.826 as Float, -0.252 as Float, 0.025 as Float, 0.268 as Float]
		dtArmRRotationAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtArmRRotationAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtArmRRotationAnimation.beginTime = beginTime
		dtArmRRotationAnimation.fillMode = fillMode
		dtArmRRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_r"]?.layer.addAnimation(dtArmRRotationAnimation, forKey:"jump_Rotation")

		let dtArmRTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		dtArmRTranslationXAnimation.duration = 0.800
		dtArmRTranslationXAnimation.values = [0.000 as Float, 6.953 as Float, 8.953 as Float, 29.984 as Float, 30.945 as Float, 20.602 as Float]
		dtArmRTranslationXAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtArmRTranslationXAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtArmRTranslationXAnimation.beginTime = beginTime
		dtArmRTranslationXAnimation.fillMode = fillMode
		dtArmRTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_r"]?.layer.addAnimation(dtArmRTranslationXAnimation, forKey:"jump_TranslationX")

		let dtArmRTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		dtArmRTranslationYAnimation.duration = 0.800
		dtArmRTranslationYAnimation.values = [0.000 as Float, -19.484 as Float, 27.555 as Float, -156.930 as Float, 27.211 as Float, -12.867 as Float]
		dtArmRTranslationYAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtArmRTranslationYAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtArmRTranslationYAnimation.beginTime = beginTime
		dtArmRTranslationYAnimation.fillMode = fillMode
		dtArmRTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_r"]?.layer.addAnimation(dtArmRTranslationYAnimation, forKey:"jump_TranslationY")

		let dtArmLRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		dtArmLRotationAnimation.duration = 0.800
		dtArmLRotationAnimation.values = [6.054 as Float, 6.156 as Float, 5.358 as Float, 6.613 as Float, 6.126 as Float, 5.886 as Float]
		dtArmLRotationAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtArmLRotationAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtArmLRotationAnimation.beginTime = beginTime
		dtArmLRotationAnimation.fillMode = fillMode
		dtArmLRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_l"]?.layer.addAnimation(dtArmLRotationAnimation, forKey:"jump_Rotation")

		let dtArmLTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		dtArmLTranslationXAnimation.duration = 0.800
		dtArmLTranslationXAnimation.values = [0.000 as Float, -2.000 as Float, -14.781 as Float, 4.523 as Float, 5.047 as Float, 8.523 as Float]
		dtArmLTranslationXAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtArmLTranslationXAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtArmLTranslationXAnimation.beginTime = beginTime
		dtArmLTranslationXAnimation.fillMode = fillMode
		dtArmLTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_l"]?.layer.addAnimation(dtArmLTranslationXAnimation, forKey:"jump_TranslationX")

		let dtArmLTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		dtArmLTranslationYAnimation.duration = 0.800
		dtArmLTranslationYAnimation.values = [0.000 as Float, -16.000 as Float, 28.945 as Float, -156.938 as Float, 24.852 as Float, -13.836 as Float]
		dtArmLTranslationYAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtArmLTranslationYAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtArmLTranslationYAnimation.beginTime = beginTime
		dtArmLTranslationYAnimation.fillMode = fillMode
		dtArmLTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_l"]?.layer.addAnimation(dtArmLTranslationYAnimation, forKey:"jump_TranslationY")

		let dtHeadTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		dtHeadTranslationXAnimation.duration = 0.800
		dtHeadTranslationXAnimation.values = [0.000 as Float, 1.477 as Float, 3.341 as Float, 22.258 as Float, 16.344 as Float, 10.344 as Float]
		dtHeadTranslationXAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtHeadTranslationXAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtHeadTranslationXAnimation.beginTime = beginTime
		dtHeadTranslationXAnimation.fillMode = fillMode
		dtHeadTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_head"]?.layer.addAnimation(dtHeadTranslationXAnimation, forKey:"jump_TranslationX")

		let dtHeadTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		dtHeadTranslationYAnimation.duration = 0.800
		dtHeadTranslationYAnimation.values = [0.000 as Float, -28.000 as Float, 23.992 as Float, -157.039 as Float, 25.008 as Float, -19.336 as Float]
		dtHeadTranslationYAnimation.keyTimes = [0.000 as Float, 0.213 as Float, 0.350 as Float, 0.663 as Float, 0.812 as Float, 1.000 as Float]
		dtHeadTranslationYAnimation.timingFunctions = [easeOutTiming, easeOutTiming, anticOverTiming, easeOutTiming, easeOutTiming]
		dtHeadTranslationYAnimation.beginTime = beginTime
		dtHeadTranslationYAnimation.fillMode = fillMode
		dtHeadTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_head"]?.layer.addAnimation(dtHeadTranslationYAnimation, forKey:"jump_TranslationY")
	}

	func removeJumpAnimation() {
		self.layer.removeAnimationForKey("Jump")
		self.viewsByName["dt_legs"]?.layer.removeAnimationForKey("jump_ScaleY")
		self.viewsByName["dt_legs"]?.layer.removeAnimationForKey("jump_TranslationX")
		self.viewsByName["dt_legs"]?.layer.removeAnimationForKey("jump_TranslationY")
		self.viewsByName["dt_torso"]?.layer.removeAnimationForKey("jump_ScaleY")
		self.viewsByName["dt_torso"]?.layer.removeAnimationForKey("jump_TranslationX")
		self.viewsByName["dt_torso"]?.layer.removeAnimationForKey("jump_TranslationY")
		self.viewsByName["dt_arm_r"]?.layer.removeAnimationForKey("jump_Rotation")
		self.viewsByName["dt_arm_r"]?.layer.removeAnimationForKey("jump_TranslationX")
		self.viewsByName["dt_arm_r"]?.layer.removeAnimationForKey("jump_TranslationY")
		self.viewsByName["dt_arm_l"]?.layer.removeAnimationForKey("jump_Rotation")
		self.viewsByName["dt_arm_l"]?.layer.removeAnimationForKey("jump_TranslationX")
		self.viewsByName["dt_arm_l"]?.layer.removeAnimationForKey("jump_TranslationY")
		self.viewsByName["dt_head"]?.layer.removeAnimationForKey("jump_TranslationX")
		self.viewsByName["dt_head"]?.layer.removeAnimationForKey("jump_TranslationY")
	}

	// - MARK: throw

	func addThrowAnimation() {
		addThrowAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addThrowAnimation(completion: ((Bool) -> Void)?) {
		addThrowAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addThrowAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addThrowAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addThrowAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addThrowAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addThrowAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.610
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Throw")
			self.animationCompletions[layer.animationForKey("Throw")!] = complete
		}

		let dtArmRRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		dtArmRRotationAnimation.duration = 0.610
		dtArmRRotationAnimation.values = [-0.135 as Float, 0.861 as Float, -1.513 as Float, -0.617 as Float]
		dtArmRRotationAnimation.keyTimes = [0.000 as Float, 0.113 as Float, 0.475 as Float, 1.000 as Float]
		dtArmRRotationAnimation.timingFunctions = [easeOutTiming, easeInTiming, easeOutTiming]
		dtArmRRotationAnimation.beginTime = beginTime
		dtArmRRotationAnimation.fillMode = fillMode
		dtArmRRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_r"]?.layer.addAnimation(dtArmRRotationAnimation, forKey:"throw_Rotation")

		let dtArmLRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		dtArmLRotationAnimation.duration = 0.610
		dtArmLRotationAnimation.values = [7.781 as Float, 8.415 as Float, 5.572 as Float, 6.889 as Float]
		dtArmLRotationAnimation.keyTimes = [0.000 as Float, 0.113 as Float, 0.475 as Float, 1.000 as Float]
		dtArmLRotationAnimation.timingFunctions = [easeOutTiming, easeInTiming, easeOutTiming]
		dtArmLRotationAnimation.beginTime = beginTime
		dtArmLRotationAnimation.fillMode = fillMode
		dtArmLRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["dt_arm_l"]?.layer.addAnimation(dtArmLRotationAnimation, forKey:"throw_Rotation")
	}

	func removeThrowAnimation() {
		self.layer.removeAnimationForKey("Throw")
		self.viewsByName["dt_arm_r"]?.layer.removeAnimationForKey("throw_Rotation")
		self.viewsByName["dt_arm_l"]?.layer.removeAnimationForKey("throw_Rotation")
	}

	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Jump")
		self.layer.removeAnimationForKey("Throw")
		self.layer.removeAnimationForKey("Fade")
	}
}